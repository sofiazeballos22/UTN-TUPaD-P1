# Ana Sof√≠a Zeballos
# UTN - TUPaD - Programaci√≥n I



# Actividad 1 - Estructuras Repetitivas
# Mostrar los n√∫meros del 0 al 100 (uno por l√≠nea)
#--------------------------------------------------------------------------------------------------------------------------------


for numero in range(0, 101):
    print(numero)


# Actividad 2 - Contar d√≠gitos de un n√∫mero entero
# ------------------------------------------------------------------------------

while True:
    entrada = input("Ingres√° un n√∫mero entero: ")
    try:
        numero = int(entrada)  
        break              
    except ValueError:
        print("‚ùå Error: eso no es un n√∫mero entero. Intent√° de nuevo.")


cantidad_digitos = len(str(abs(numero)))  # usamos abs() para ignorar el signo negativo
print(f" El n√∫mero tiene {cantidad_digitos} d√≠gito(s).")





# Actividad 3 - Sumar n√∫meros entre dos valores (sin incluirlos)
# ------------------------------------------------------------------------------

def pedir_entero(mensaje):
    while True:
        entrada = input(mensaje)
        try:
            return int(entrada)
        except ValueError:
            print("‚ùå Error: eso no es un n√∫mero entero. Intent√° de nuevo.")


inicio = pedir_entero("Ingres√° el primer n√∫mero: ")
fin = pedir_entero("Ingres√° el segundo n√∫mero: ")

# Aseguramos el orden correcto (menor a mayor)
menor = min(inicio, fin)
mayor = max(inicio, fin)

# Sumamos los valores entre ambos, sin incluir los extremos
suma = 0
for i in range(menor + 1, mayor):
    suma += i

# Mostramos el resultado
if menor + 1 >= mayor:
    print(f"No hay n√∫meros enteros entre {inicio} y {fin} para sumar.")
else:
    print(f"La suma de los n√∫meros entre {inicio} y {fin}, excluy√©ndolos, es: {suma}")



# Actividad 4 - Sumar n√∫meros hasta que el usuario ingrese 0
# ------------------------------------------------------------------------------

total = 0

while True:
    entrada = input("Ingres√° un n√∫mero (0 para terminar): ")
    try:
        numero = int(entrada)
    except ValueError:
        print("‚ùå Error: eso no es un n√∫mero entero. Intent√° de nuevo.")
        continue  # vuelve al principio del while

    if numero == 0:
        break  # termina el bucle si el n√∫mero es cero

    total += numero

print(f" La suma total es: {total}")





# Actividad 5 - Imprimir pares en orden descendente


print("N√∫meros pares del 0 al 100 en orden decreciente:")
for numero in range(100, -1, -2):
    print(numero)





# Actividad 7 - Suma de n√∫meros desde 0 hasta un n√∫mero indicado por el usuario
# --------------------------------------------------------------------------------

while True:
    entrada = input("Ingres√° un n√∫mero entero positivo: ")
    try:
        limite = int(entrada)
        if limite <= 0:
            print("‚ùå El n√∫mero debe ser mayor que 0. Intent√° de nuevo.")
            continue
        break
    except ValueError:
        print("‚ùå Eso no es un n√∫mero entero v√°lido. Intent√° de nuevo.")

# Calculamos la suma de todos los n√∫meros desde 1 hasta (limite - 1)
suma = 0
for i in range(1, limite):
    suma += i

print(f" La suma de los n√∫meros entre 0 y {limite}, sin incluir {limite}, es: {suma}")



# Actividad 8 - Clasificar 100 n√∫meros enteros
# ------------------------------------------------------------------------------

TOTAL_NUMEROS = 5  # Cambi√° este valor para probar con menos n√∫meros

# Contadores
pares = 0
impares = 0
positivos = 0
negativos = 0

print(f"Ingres√° {TOTAL_NUMEROS} n√∫meros enteros:")

for i in range(1, TOTAL_NUMEROS + 1):
    while True:
        entrada = input(f"{i}. Ingres√° un n√∫mero entero: ")
        try:
            numero = int(entrada)
            break
        except ValueError:
            print("‚ùå Eso no es un n√∫mero entero. Intent√° de nuevo.")

    # Clasificamos el n√∫mero
    if numero % 2 == 0:
        pares += 1
    else:
        impares += 1

    if numero > 0:
        positivos += 1
    elif numero < 0:
        negativos += 1
    # Si es 0, no suma ni a positivos ni a negativos

# Resultados finales
print("\nüìä Resultados:")
print(f"üî¢ Pares: {pares}")
print(f"üî¢ Impares: {impares}")
print(f"‚ûï Positivos: {positivos}")
print(f"‚ûñ Negativos: {negativos}")






# Actividad 9 - Calcular la media de N n√∫meros enteros
# -----------------------------------------------------------------------------------

CANTIDAD_NUMEROS = 5  # Cambi√° este valor a 100 

numeros = []
print(f"Ingres√° {CANTIDAD_NUMEROS} n√∫meros enteros:")

for i in range(1, CANTIDAD_NUMEROS + 1):
    while True:
        entrada = input(f"{i}. Ingres√° un n√∫mero entero: ")
        try:
            numero = int(entrada)
            numeros.append(numero)
            break
        except ValueError:
            print("‚ùå Eso no es un n√∫mero entero v√°lido. Intent√° de nuevo.")

# Calculamos la media
suma = sum(numeros)
media = suma / CANTIDAD_NUMEROS

# Mostramos resultado
print("\nüìä Resultado final:")
print(f"üßÆ Suma total: {suma}")
print(f"üìà Media (promedio): {media}")




# Actividad 10 - Invertir los d√≠gitos de un n√∫mero entero (m√≠nimo 2 d√≠gitos)
# ---------------------------------------------------------------------------

while True:
    entrada = input("Ingres√° un n√∫mero entero de al menos 2 d√≠gitos: ")
    try:
        numero = int(entrada)
        # Validar cantidad de d√≠gitos 
        if len(str(abs(numero))) < 2:
            print("‚ö†Ô∏è El n√∫mero debe tener al menos 2 d√≠gitos. Intent√° de nuevo.")
            continue
        break
    except ValueError:
        print("‚ùå Eso no es un n√∫mero entero v√°lido. Intent√° de nuevo.")

# Invertimos el n√∫mero
numero_invertido = str(abs(numero))[::-1]

# Agregamos el signo si era negativo
if numero < 0:
    numero_invertido = "-" + numero_invertido

print(f"üîÅ N√∫mero invertido: {numero_invertido}")
